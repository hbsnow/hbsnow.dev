---
import clsx from "clsx";

import { Footer } from "@/components/Footer";
import { Header } from "@/components/Header";
import { TagList } from "@/components/TagList";
import { Container } from "@/cores/Container";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { AstroMdProps } from "@/types/astro";
import { formattedDate } from "@/utils/formattedDate";
import { ogpImagePath } from "@/utils/ogpImagePath";

const {
  frontmatter: { title, description, createdAt, updatedAt, tags },
} = Astro.props as AstroMdProps;
const image = ogpImagePath("title");
---

<BaseLayout
  seo={{
    title: `${title} | hbsnow.dev`,
    description,
    openGraph: {
      basic: { title, type: "website", image },
      article: {
        publishedTime: createdAt,
        modifiedTime: updatedAt,
      },
      image: { alt: title },
      optional: { title },
    },
    twitter: {
      card: "summary",
      site: "@hbsnow",
    },
  }}
>
  <Header paths={[{ name: "blog", href: "/blog" }]} />

  <main>
    <article>
      <Container>
        <header>
          <div class="times">
            <div
              class={clsx("createdAt", {
                disabled: !!updatedAt,
              })}
            >
              <time aria-label="作成日" datetime={createdAt}>
                {formattedDate(createdAt)}
              </time>
            </div>
            {
              updatedAt && (
                <div class="updatedAt">
                  <time aria-label="更新日" datetime={updatedAt}>
                    {formattedDate(updatedAt)}
                  </time>
                </div>
              )
            }
          </div>

          <h1>{title}</h1>

          <div class="tags">
            <TagList tags={tags} />
          </div>
        </header>

        <div class="content">
          <slot />
        </div>
      </Container>
    </article>
  </main>

  <Footer />
</BaseLayout>

<style>
  article {
    padding: var(--s5) 0;
  }

  h1 {
    margin: 0;
    margin-top: var(--s0);
    line-height: var(--line-height-small);
  }

  .times {
    display: flex;
    gap: var(--s-2);
  }

  .createdAt,
  .updatedAt {
    font-size: var(--s-1);
  }

  .createdAt.disabled {
    color: var(--color-default-text-muted);
  }

  .tags {
    margin-top: var(--s0);
  }

  .content {
    margin-top: var(--s5);
  }

  main > :global(article pre) {
    border-radius: var(--border-radius);
    margin-left: -2vw;
    margin-right: -2vw;
    padding: var(--s0) 2vw;
  }

  main > :global(article .responsiveTable) {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
  main > :global(article .responsiveTable > table) {
    width: 100%;
    vertical-align: top;
  }
  main > :global(article .rlc-container) {
    display: flex;
    flex-wrap: wrap;
    border: var(--border-thin) solid var(--color-default-divider);
    border-radius: var(--border-radius);
    margin-top: var(--s0);
    margin-left: -2vw;
    margin-right: -2vw;
    padding: var(--s0) 2vw;
    gap: var(--s0);
  }

  main > :global(article .rlc-container > .rlc-info) {
    display: flex;
    min-width: 18rem;
    flex-direction: column;
    flex-basis: 0;
    flex-grow: 999;
    order: 2;
  }

  main > :global(article .rlc-container > .rlc-info > .rlc-title) {
    line-height: var(--line-height-small);
  }

  main > :global(article .rlc-container > .rlc-info > .rlc-description) {
    display: none;
  }
  main > :global(article .rlc-container > .rlc-info > .rlc-url-container) {
    display: flex;
    align-items: center;
    font-size: var(--s-1);
    margin-top: auto;
    gap: var(--s-5);
  }

  main
    > :global(article
      .rlc-container
      > .rlc-info
      > .rlc-url-container
      > .rlc-url) {
    max-width: 80vw;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  main > :global(article .rlc-container > .rlc-image-container) {
    flex-basis: 12rem;
    flex-grow: 1;
    order: 1;
  }

  main > :global(article .rlc-container > .rlc-image-container > .rlc-image) {
    width: 100%;
    height: auto;
    vertical-align: bottom;
  }
</style>
